# T3 Foundation Gemstone Project [t3gemstone.org]
# SPDX-License-Identifier: Apache-2.0

version: '3'

vars:
  VERSION: '1.0.1'
  TOOLCHAIN_ARCH: aarch64-none-linux-gnu
  DISTRO_BASE: '{{ .DISTRO_BASE | default "ubuntu" }}'
  DISTRO_SUITE: '{{ .DISTRO_SUITE | default "jammy" }}'
  DISTRO_TYPE: '{{ .DISTRO_TYPE | default "minimal" }}'
  DOWNLOADDIR: '{{ .ROOT_DIR }}/build/downloads'
  BUILDDIR: '{{ .ROOT_DIR }}/build/{{ .DISTRO_BASE }}-{{ .DISTRO_SUITE }}'
  TOOLCHAIN_PATH: '{{ .BUILDDIR }}/toolchain'
  SYSROOT_PATH:
    sh: |
      if [ -d "{{ .BUILDDIR }}/sysroot" ]; then
        echo "{{ .BUILDDIR }}/sysroot"
      else
        echo "{{ .BUILDDIR }}/toolchain/{{ .TOOLCHAIN_ARCH }}/libc"
      fi
  DEBOS_PATH: '{{ .BUILDDIR }}/debos'
  SYMLINK_FIXER_PATH: '{{ .DOWNLOADDIR }}/symlink-fixer'
  TARBALL_DIR: '{{ .ROOT_DIR }}/build/tarball/{{.VERSION}}'
  TARBALL_FILE_PATH: '{{ .ROOT_DIR }}/build/tarball/prebuilt-toolchain-{{ .DISTRO_BASE }}-{{ .DISTRO_SUITE }}-{{ .VERSION }}.tar.xz'
  URLS:
    map: {
      jammy: 'https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel/gcc-arm-11.2-2022.02-x86_64-{{.TOOLCHAIN_ARCH}}.tar.xz',
      noble: 'https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-{{.TOOLCHAIN_ARCH}}.tar.xz',
      bullseye: 'https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-{{.TOOLCHAIN_ARCH}}.tar.xz',
      bookworm: 'https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-{{.TOOLCHAIN_ARCH}}.tar.xz',
      symlinkfixer: 'https://raw.githubusercontent.com/abhiTronix/rpi_rootfs/master/scripts/sysroot-relativelinks.py',
      texas_j722_rtos_sdk: 'https://dr-download.ti.com/software-development/software-development-kit-sdk/MD-1bSfTnVt5d/10.01.00.04/ti-processor-sdk-rtos-j722s-evm-10_01_00_04.tar.gz',
      texas_j722_mcusw_sdk: 'https://dr-download.ti.com/software-development/software-development-kit-sdk/MD-1bSfTnVt5d/10.01.00.04/MCUSW_J722S_10.01.00.03.zip',
    }

includes:
  distro: distro

tasks:

  default:
    silent: true
    cmds:
      - task --list-all --summary
      - echo
      - echo "Environment:"
      - echo
      - echo "  DISTRO_BASE         = '{{ .DISTRO_BASE }}'"
      - echo "  DISTRO_SUITE        = '{{ .DISTRO_SUITE }}'"
      - echo "  DISTRO_TYPE         = '{{ .DISTRO_TYPE }}'"
      - echo "  TOOLCHAIN_ARCH      = '{{ .TOOLCHAIN_ARCH }}'"
      - echo "  TOOLCHAIN_URL       = '{{ get .URLS .DISTRO_SUITE }}"
      - echo "  TOOLCHAIN_PATH      = '{{ .TOOLCHAIN_PATH }}'"
      - echo "  SYSROOT_PATH        = '{{ .SYSROOT_PATH }}'"
      - echo "  DEBOS_PATH          = '{{ .DEBOS_PATH }}'"
      - echo "  DEBOS_VERSION       = '{{ .DEBOS_VERSION }}'"
      - echo "  SYMLINK_FIXER_PATH  = '{{ .SYMLINK_FIXER_PATH }}'"
      - echo

  destroy:
    prompt: '{{ .TOOLCHAIN_PATH }} The toolchain in this path will be deleted. Do you want to continue?'
    cmds:
      - 'rm -rf {{ .TOOLCHAIN_PATH }}'

  wget:
    internal: true
    cmds:
      - mkdir -p $(dirname {{.PATH}})
      - wget --no-clobber --continue --quiet --show-progress -O {{.PATH}} {{.URL}} || true
    requires:
      vars: [ URL, PATH ]

  fetch:
    silent: true
    cmds:
      - task: wget
        vars:
          URL: '{{ get .URLS .DISTRO_SUITE }}'
          PATH: 'build/downloads/{{.TOOLCHAIN_ARCH}}.tar.xz'
      - mkdir -p {{ .TOOLCHAIN_PATH }}
      - tar xf build/downloads/{{.TOOLCHAIN_ARCH}}.tar.xz --skip-old-files --strip-components=1 --directory={{ .TOOLCHAIN_PATH }}
      - task: wget
        vars:
          URL: '{{ get .URLS "symlinkfixer" }}'
          PATH: '{{ .SYMLINK_FIXER_PATH }}'
      - chmod +x '{{ .SYMLINK_FIXER_PATH }}'
      - vcs import . < repos.yml
    requires:
      vars:
        - name: DISTRO_BASE
          enum: [ ubuntu, debian ]
        - name: DISTRO_TYPE
          enum: [ minimal, qt ]
        - name: DISTRO_SUITE
          enum:
            - jammy     # Ubuntu 22.04, GLIBC 2.35
            - noble     # Ubuntu 24.04, GLIBC 2.39
            - bullseye  # Debian 11, GLIBC 2.31
            - bookworm  # Debian 12, GLIBC 2.36
    status:
      - test "$({{ .TOOLCHAIN_PATH }}/bin/{{ .TOOLCHAIN_ARCH }}-gcc -dumpmachine)" == "{{ .TOOLCHAIN_ARCH }}"
      - test -x "{{ .SYMLINK_FIXER_PATH }}"
      - test -d src/debos

  fetch-ti:
    silent: true
    cmds:
      - task: wget
        vars:
          URL: '{{ get .URLS "texas_j722_rtos_sdk" }}'
          PATH: '{{ .DOWNLOADDIR }}/ti-j722s-rtos-sdk.tar.gz'
      - task: wget
        vars:
          URL: '{{ get .URLS "texas_j722_mcusw_sdk" }}'
          PATH: '{{ .DOWNLOADDIR }}/mcusw-j722s.zip'

  source:
    silent: true
    cmds:
      - task: fetch
      - echo '# Run <eval "$(task source)"> to export following environment variables to your shell'
      - echo
      - echo export SDKTARGETSYSROOT='"{{ .SYSROOT_PATH }}"'
      - echo
      - echo export AR='{{ .TOOLCHAIN_ARCH }}-ar'
      - echo export ARCH='arm64'
      - echo export AS='{{ .TOOLCHAIN_ARCH }}-as'
      - echo export CC='"{{ .TOOLCHAIN_ARCH }}-gcc --sysroot=$SDKTARGETSYSROOT"'
      - echo export CFLAGS='" -O2 -g -pipe"'
      - echo export CONFIGURE_FLAGS='"--target={{ .TOOLCHAIN_ARCH }} --host={{ .TOOLCHAIN_ARCH }} --build=x86_64-linux --with-libtool-sysroot=$SDKTARGETSYSROOT"'
      - echo export CPP='"{{ .TOOLCHAIN_ARCH }}-gcc -E --sysroot=$SDKTARGETSYSROOT"'
      - echo export CPPFLAGS='""'
      - echo export CROSS_COMPILE='{{ .TOOLCHAIN_ARCH }}-'
      - echo export CXX='"{{ .TOOLCHAIN_ARCH }}-g++ --sysroot=$SDKTARGETSYSROOT"'
      - echo export CXXFLAGS='" -O2 -g -pipe"'
      - echo export GDB='{{ .TOOLCHAIN_ARCH }}-gdb'
      - echo export KCFLAGS='--sysroot=$SDKTARGETSYSROOT'
      - echo export LD='{{ .TOOLCHAIN_ARCH }}-ld'
      - echo export LDFLAGS='"-Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed -Wl,-z,relro,-z,now -L$SDKTARGETSYSROOT/lib/aarch64-linux-gnu -L$SDKTARGETSYSROOT/usr/lib/aarch64-linux-gnu"'
      - echo export NM='{{ .TOOLCHAIN_ARCH }}-nm'
      - echo export OBJCOPY='{{ .TOOLCHAIN_ARCH }}-objcopy'
      - echo export OBJDUMP='{{ .TOOLCHAIN_ARCH }}-objdump'
      - echo export PATH='"{{ .TOOLCHAIN_PATH }}/bin:$PATH"'
      - echo export PKG_CONFIG_PATH='"$SDKTARGETSYSROOT/usr/lib/pkgconfig:$SDKTARGETSYSROOT/usr/share/pkgconfig"'
      - echo export PKG_CONFIG_SYSROOT_DIR='$SDKTARGETSYSROOT'
      - echo export RANLIB='{{ .TOOLCHAIN_ARCH }}-ranlib'
      - echo export READELF='{{ .TOOLCHAIN_ARCH }}-readelf'
      - echo export STRIP='{{ .TOOLCHAIN_ARCH }}-strip'
      - echo export TARGET_PREFIX='{{ .TOOLCHAIN_ARCH }}-'

  example:
    cmds:
      - task: fetch
      - sudo rm -f {{ .DEBOS_PATH }}/root/usr/local/bin/hello
      - |
        eval "$(task source)"
        make -C example clean hello
        sudo cp example/hello {{ .DEBOS_PATH }}/root/usr/local/bin

  create:tarball:
    summary: 'Pack all-in-one toolchain tarball'
    cmds:
      - mkdir -p {{ .TARBALL_DIR }}
      - |
        sudo cp -a {{ .SYSROOT_PATH }} {{ .TARBALL_DIR }}/sysroot
        sudo cp -a {{ .DEBOS_PATH }}/root {{ .TARBALL_DIR }}/rootfs
        sudo cp -a {{ .TOOLCHAIN_PATH }} {{ .TARBALL_DIR }}/
      - mkdir -p {{ .TARBALL_DIR }}/ti
      - test -e {{ .DOWNLOADDIR }}/ti-j722s-rtos-sdk.tar.gz && tar -xf {{ .DOWNLOADDIR }}/ti-j722s-rtos-sdk.tar.gz --skip-old-files --directory {{ .TARBALL_DIR }}/ti || true
      - test -e {{ .DOWNLOADDIR }}/mcusw-j722s.zip && unzip -n {{ .DOWNLOADDIR }}/mcusw-j722s.zip -d {{.TARBALL_DIR}}/ti/ || true
      - sudo tar czf {{ .TARBALL_FILE_PATH }} -C {{ .TARBALL_DIR }} .
      - sudo chown $USER:$USER {{ .TARBALL_FILE_PATH }}
      - sudo rm -rf {{ .TARBALL_DIR }}
